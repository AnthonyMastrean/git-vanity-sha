#!/usr/bin/env ruby
require 'digest'

module GitDead
  extend self

  COMMITTER_PATTERN = /^committer .* \<.*\> (?<timestamp>\d+)(?<timezone>.*$)/

  TIMESTAMP_DELTA_MAX = 7 * 24 * 60 * 60

  DELTAS = Enumerator.new do |enumerator|
    for i in 0..TIMESTAMP_DELTA_MAX
      enumerator << i
      enumerator << -i
    end
  end

  def get_commit_info()
    `git cat-file commit HEAD`
  end

  def extract_committer(commit_info)
    committer = commit_info
    .split("\n")
    .map {|line| line.match(COMMITTER_PATTERN)}
    .compact
    .first

    [committer.string, committer[:timestamp].to_i, committer[:timezone]]
  end

  def apply_timestamp_delta(commit_info, delta)
    committer_line, commit_ts = GitDead.extract_committer(commit_info)
    new_committer_line = committer_line.sub(commit_ts.to_s, (commit_ts + delta).to_s)
    commit_info.sub(committer_line, new_committer_line)
  end

  def search(commit_info, hex_prefix)
    DELTAS.each do |delta|
      new_commit = apply_timestamp_delta(commit_info, delta)
      new_sha = get_sha(new_commit)
      return [delta, new_sha] if new_sha.start_with?(hex_prefix)
    end
    nil
  end

  def get_sha(commit_info)
    Digest::SHA1.hexdigest "#{commit_header(commit_info)}#{commit_info}"
  end

  def commit_header(commit_info)
    "commit #{commit_info.length}\0"
  end
end

target_prefix = ARGV[0]
if ARGV.length != 1 || ARGV[0].length < 1
  puts "usage: git vanity-sha cafe"
  exit(1)
end
original_commit_info = GitDead.get_commit_info()
_, original_ts, original_tz = GitDead.extract_committer(original_commit_info)
result = GitDead.search(original_commit_info, ARGV[0])

if result
  delta, sha = result
  original_time = Time.at(original_ts)
  new_time = Time.at(original_ts + delta)
  puts "SHA found: #{sha.sub(target_prefix, "\e[32m#{target_prefix}\e[0m")}"
  puts "Change committer timestamp to #{new_time}?"
  print "(y/n): "
  if STDIN.gets.chomp == "y"
    `LC_ALL=C GIT_COMMITTER_DATE=\"#{original_ts+delta}#{original_tz}\" git commit --amend --no-edit`
    puts "\n" + "-" * 47
    puts `git show HEAD`
  else
    puts "aborting"
  end
else
  puts "Failed to generate a sha with prefix #{target_prefix}"
end
